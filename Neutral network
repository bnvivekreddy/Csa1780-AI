import numpy as np

# Sigmoid Activation Function and its Derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Initialize a Feed Forward Neural Network
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Randomly initialize weights with small values
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)  # Input to Hidden Layer
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)  # Hidden to Output Layer
        self.bias_hidden = np.zeros((1, hidden_size))  # Bias for Hidden Layer
        self.bias_output = np.zeros((1, output_size))  # Bias for Output Layer

    # Feedforward pass through the network
    def feedforward(self, X):
        # Calculate hidden layer output
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)

        # Calculate output layer output
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.final_output = sigmoid(self.final_input)

        return self.final_output

    # Backpropagation to update weights and biases
    def backpropagate(self, X, y, learning_rate):
        # Calculate the error (difference between predicted and actual output)
        error = y - self.final_output

        # Calculate the gradient of the output layer
        output_gradient = error * sigmoid_derivative(self.final_output)

        # Calculate the error for the hidden layer
        hidden_error = output_gradient.dot(self.weights_hidden_output.T)
        hidden_gradient = hidden_error * sigmoid_derivative(self.hidden_output)

        # Update weights and biases using gradient descent
        self.weights_hidden_output += self.hidden_output.T.dot(output_gradient) * learning_rate
        self.bias_output += np.sum(output_gradient, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += X.T.dot(hidden_gradient) * learning_rate
        self.bias_hidden += np.sum(hidden_gradient, axis=0, keepdims=True) * learning_rate

    # Training the Neural Network
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            # Feedforward step
            self.feedforward(X)

            # Backpropagation step
            self.backpropagate(X, y, learning_rate)

            if epoch % 1000 == 0:
                loss = np.mean(np.square(y - self.final_output))  # Mean Squared Error
                print(f"Epoch {epoch}, Loss: {loss}")

# Example Usage
if __name__ == "__main__":
    # XOR problem (input and expected output)
    X = np.array([[0, 0],
                  [0, 1],
                  [1, 0],
                  [1, 1]])

    y = np.array([[0],
                  [1],
                  [1],
                  [0]])

    # Initialize neural network with 2 input neurons, 4 hidden neurons, and 1 output neuron
    nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1)

    # Train the neural network on XOR data
    nn.train(X, y, epochs=10000, learning_rate=0.1)

    # Test the neural network with trained weights
    print("\nTesting the network on the XOR input:")
    print("Predictions:")
    predictions = nn.feedforward(X)
    print(predictions)
