from itertools import permutations

def travelling_salesman_problem(graph, start):
    nodes = list(graph.keys())
    nodes.remove(start)
    min_cost = float('inf')
    min_path = []

    for perm in permutations(nodes):
        cost = 0
        current = start
        for node in perm:
            cost += graph[current][node]
            current = node
        cost += graph[current][start]

        if cost < min_cost:
            min_cost = cost
            min_path = [start] + list(perm) + [start]

    return min_path, min_cost

# Example graph
graph = {
    'A': {'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30}
}
start = 'A'
path, cost = travelling_salesman_problem(graph, start)
print("Optimal Path:", path)
print("Minimum Cost:", cost)
