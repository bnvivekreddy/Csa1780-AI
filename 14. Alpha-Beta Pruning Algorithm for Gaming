def alpha_beta_pruning(board, depth, alpha, beta, is_maximizing):
    winner = board.check_winner()
    if winner == 'X':
        return 10 - depth
    elif winner == 'O':
        return depth - 10
    elif board.is_full():
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(9):
            if board.board[i] == ' ':
                board.board[i] = 'X'
                eval = alpha_beta_pruning(board, depth + 1, alpha, beta, False)
                board.board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board.board[i] == ' ':
                board.board[i] = 'O'
                eval = alpha_beta_pruning(board, depth + 1, alpha, beta, True)
                board.board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

# Example gameplay
print("Alpha-Beta score:", alpha_beta_pruning(game, 0, float('-inf'), float('inf'), False))
