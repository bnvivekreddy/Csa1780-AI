class TicTacToe:
    def __init__(self):
        self.board = [' '] * 9

    def display_board(self):
        for i in range(0, 9, 3):
            print('|'.join(self.board[i:i+3]))
            if i < 6:
                print('-' * 5)

    def make_move(self, pos, player):
        if self.board[pos] == ' ':
            self.board[pos] = player
            return True
        return False

    def check_winner(self):
        win_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ]
        for combo in win_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != ' ':
                return self.board[combo[0]]
        return None

    def is_full(self):
        return ' ' not in self.board

def minimax(board, depth, is_maximizing):
    winner = board.check_winner()
    if winner == 'X':
        return 10 - depth
    elif winner == 'O':
        return depth - 10
    elif board.is_full():
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(9):
            if board.board[i] == ' ':
                board.board[i] = 'X'
                eval = minimax(board, depth + 1, False)
                board.board[i] = ' '
                max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board.board[i] == ' ':
                board.board[i] = 'O'
                eval = minimax(board, depth + 1, True)
                board.board[i] = ' '
                min_eval = min(min_eval, eval)
        return min_eval

# Example gameplay
game = TicTacToe()
game.display_board()

game.make_move(0, 'X')
game.make_move(4, 'O')
game.make_move(8, 'X')

game.display_board()
print("Best score:", minimax(game, 0, False))
